// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `bank.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package gAccounts;

public class AccountInfo implements java.lang.Cloneable,
                                    java.io.Serializable
{
    public gBank.PersonalData personalData;

    public double money;

    public String accountType;

    public AccountInfo()
    {
        this.personalData = new gBank.PersonalData();
        this.accountType = "";
    }

    public AccountInfo(gBank.PersonalData personalData, double money, String accountType)
    {
        this.personalData = personalData;
        this.money = money;
        this.accountType = accountType;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        AccountInfo r = null;
        if(rhs instanceof AccountInfo)
        {
            r = (AccountInfo)rhs;
        }

        if(r != null)
        {
            if(this.personalData != r.personalData)
            {
                if(this.personalData == null || r.personalData == null || !this.personalData.equals(r.personalData))
                {
                    return false;
                }
            }
            if(this.money != r.money)
            {
                return false;
            }
            if(this.accountType != r.accountType)
            {
                if(this.accountType == null || r.accountType == null || !this.accountType.equals(r.accountType))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::gAccounts::AccountInfo");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, personalData);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, money);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, accountType);
        return h_;
    }

    public AccountInfo clone()
    {
        AccountInfo c = null;
        try
        {
            c = (AccountInfo)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        gBank.PersonalData.ice_write(ostr, this.personalData);
        ostr.writeDouble(this.money);
        ostr.writeString(this.accountType);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.personalData = gBank.PersonalData.ice_read(istr);
        this.money = istr.readDouble();
        this.accountType = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, AccountInfo v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public AccountInfo ice_read(com.zeroc.Ice.InputStream istr)
    {
        AccountInfo v = new AccountInfo();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<AccountInfo> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, AccountInfo v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<AccountInfo> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(AccountInfo.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final AccountInfo _nullMarshalValue = new AccountInfo();

    public static final long serialVersionUID = -7030414414840005289L;
}
