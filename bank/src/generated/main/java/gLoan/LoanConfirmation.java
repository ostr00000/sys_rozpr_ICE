// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `bank.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package gLoan;

public class LoanConfirmation implements java.lang.Cloneable,
                                         java.io.Serializable
{
    public Date repaymentDate;

    public String baseCurrencyCode;

    public double inBaseCurrency;

    public String otherCurrencyCode;

    public double inOtherCurrency;

    public LoanConfirmation()
    {
        this.repaymentDate = new Date();
        this.baseCurrencyCode = "";
        this.otherCurrencyCode = "";
    }

    public LoanConfirmation(Date repaymentDate, String baseCurrencyCode, double inBaseCurrency, String otherCurrencyCode, double inOtherCurrency)
    {
        this.repaymentDate = repaymentDate;
        this.baseCurrencyCode = baseCurrencyCode;
        this.inBaseCurrency = inBaseCurrency;
        this.otherCurrencyCode = otherCurrencyCode;
        this.inOtherCurrency = inOtherCurrency;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        LoanConfirmation r = null;
        if(rhs instanceof LoanConfirmation)
        {
            r = (LoanConfirmation)rhs;
        }

        if(r != null)
        {
            if(this.repaymentDate != r.repaymentDate)
            {
                if(this.repaymentDate == null || r.repaymentDate == null || !this.repaymentDate.equals(r.repaymentDate))
                {
                    return false;
                }
            }
            if(this.baseCurrencyCode != r.baseCurrencyCode)
            {
                if(this.baseCurrencyCode == null || r.baseCurrencyCode == null || !this.baseCurrencyCode.equals(r.baseCurrencyCode))
                {
                    return false;
                }
            }
            if(this.inBaseCurrency != r.inBaseCurrency)
            {
                return false;
            }
            if(this.otherCurrencyCode != r.otherCurrencyCode)
            {
                if(this.otherCurrencyCode == null || r.otherCurrencyCode == null || !this.otherCurrencyCode.equals(r.otherCurrencyCode))
                {
                    return false;
                }
            }
            if(this.inOtherCurrency != r.inOtherCurrency)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::gLoan::LoanConfirmation");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, repaymentDate);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, baseCurrencyCode);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, inBaseCurrency);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, otherCurrencyCode);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, inOtherCurrency);
        return h_;
    }

    public LoanConfirmation clone()
    {
        LoanConfirmation c = null;
        try
        {
            c = (LoanConfirmation)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        Date.ice_write(ostr, this.repaymentDate);
        ostr.writeString(this.baseCurrencyCode);
        ostr.writeDouble(this.inBaseCurrency);
        ostr.writeString(this.otherCurrencyCode);
        ostr.writeDouble(this.inOtherCurrency);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.repaymentDate = Date.ice_read(istr);
        this.baseCurrencyCode = istr.readString();
        this.inBaseCurrency = istr.readDouble();
        this.otherCurrencyCode = istr.readString();
        this.inOtherCurrency = istr.readDouble();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, LoanConfirmation v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public LoanConfirmation ice_read(com.zeroc.Ice.InputStream istr)
    {
        LoanConfirmation v = new LoanConfirmation();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<LoanConfirmation> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, LoanConfirmation v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<LoanConfirmation> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(LoanConfirmation.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final LoanConfirmation _nullMarshalValue = new LoanConfirmation();

    public static final long serialVersionUID = -1541812521926530595L;
}
